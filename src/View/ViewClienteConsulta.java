package View;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Model.Cliente;
import DAO.ClienteDAO;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;


public class ViewClienteConsulta extends javax.swing.JInternalFrame {
    ArrayList<Cliente> listaModelClientes = new ArrayList<>();
    String salvarAlterar;
    Cliente cliente;
    ClienteDAO clienteDAO;    
    
    public ViewClienteConsulta() {
        clienteDAO = new ClienteDAO();
        initComponents();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tb_cliente = new javax.swing.JTable();
        lb_cidade2 = new javax.swing.JLabel();
        txt_filtro = new javax.swing.JTextField();
        btn_buscarPorId = new javax.swing.JButton();
        txt_info = new javax.swing.JLabel();

        setClosable(true);

        tb_cliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Nome do Cliente", "CPF", "Telefone", "Endereço", "Bairro", "CEP", "Cidade", "UF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_cliente.setEnabled(false);
        tb_cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_clienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_cliente);

        lb_cidade2.setText("Filtrar por nome:");

        txt_filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_filtroActionPerformed(evt);
            }
        });
        txt_filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_filtroKeyReleased(evt);
            }
        });

        btn_buscarPorId.setText("Buscar por código do cliente");
        btn_buscarPorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarPorIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_buscarPorId, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                    .addComponent(txt_info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb_cidade2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lb_cidade2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscarPorId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_info, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tb_clienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_clienteMouseClicked
        int linha = tb_cliente.getSelectedRow();
        int codigoCliente = (int) tb_cliente.getValueAt(linha, 0);
        salvarAlterar = "alterar";
       
        cliente = new Cliente();        

        try {
            cliente = clienteDAO.BuscarClientePorId(String.valueOf(codigoCliente));
        } catch (Exception e) {
            Logger.getLogger(ViewClienteConsulta.class.getName()).log(Level.SEVERE, null, e);
        }

        // Preenche os campos com os dados do cliente
    }//GEN-LAST:event_tb_clienteMouseClicked

    private void txt_filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_filtroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_filtroActionPerformed

    private void txt_filtroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_filtroKeyReleased
        String filtro = txt_filtro.getText();

        if (filtro.isEmpty()) {
            carregarClientes("");
        } else {
            carregarClientes(filtro);
        }
    }//GEN-LAST:event_txt_filtroKeyReleased

    private void btn_buscarPorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarPorIdActionPerformed

        String id = JOptionPane.showInputDialog(this, "Digite o código do cliente:");
        if (id == null || id.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Você deve informar um código válido!", "Validação de dados!", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!id.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "O código deve conter apenas números!", "Validação de dados!", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            cliente = clienteDAO.BuscarClientePorId(id);
            if (cliente == null || cliente.getIdCliente()== 0) {
                JOptionPane.showMessageDialog(this, "Código de cliente não encontrado!", "Validação de dados!", JOptionPane.ERROR_MESSAGE);
                //limparCampos();
            } else {
                txt_info.setText(info);
                tb_cliente.setValueAt(cliente.getIdCliente(), 0,0);
                tb_cliente.setValueAt(cliente.getCliNome(), 0,1);
                tb_cliente.setValueAt(cliente.getCliCpf(), 0,2);
                tb_cliente.setValueAt(cliente.getCliTelefone(), 0,3);
                tb_cliente.setValueAt(cliente.getCliEndereco(), 0,4);
                tb_cliente.setValueAt(cliente.getCliBairro(), 0,5);
                tb_cliente.setValueAt(cliente.getCliCep(), 0,6);
                tb_cliente.setValueAt(cliente.getCliCidade(), 0,7);
                tb_cliente.setValueAt(cliente.getCliUf(), 0,8);
            }
        } catch (Exception e) {
            Logger.getLogger(ViewProduto.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Erro ao buscar cliente: " + e.getMessage(), "Validação de dados!", JOptionPane.ERROR_MESSAGE);
        }

     
    }//GEN-LAST:event_btn_buscarPorIdActionPerformed

    public void carregarClientes() {
        try {
            listaModelClientes = clienteDAO.listarTodosClientes();
            DefaultTableModel modelo = (DefaultTableModel) tb_cliente.getModel();
            modelo.setNumRows(0);           

            for (Cliente cliente : listaModelClientes) {
                modelo.addRow(new Object[]{
                    cliente.getIdCliente(),
                    cliente.getCliNome(),
                    cliente.getCliCpf(),
                    cliente.getCliTelefone(),
                    cliente.getCliEndereco(),
                    cliente.getCliBairro(),
                    cliente.getCliCep(),
                    cliente.getCliCidade(),
                    cliente.getCliUf(),
                });            
            }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar clientes: " + e.getMessage());
    }
}
    
    public void carregarClientes(String filtro) {
      try {
          ArrayList<Cliente> listaCliente;

          if (filtro.isEmpty()) {
              // Chama o método que retorna todos
              listaCliente = clienteDAO.buscarCliente("kjdaskdjas907364275hdfkhfdks--fdsmfnsd");
          } else {
              // Chama o método de busca com filtro
              listaCliente = clienteDAO.buscarCliente(filtro);
          }

          DefaultTableModel modelo = (DefaultTableModel) tb_cliente.getModel();
          modelo.setNumRows(0); // Limpa a tabela

          // Preenche a tabela com os dados da lista
          for (Cliente cliente : listaCliente) {
                  modelo.addRow(new Object[]{
                      cliente.getIdCliente(),
                      cliente.getCliNome(),
                      cliente.getCliCpf(),
                      cliente.getCliTelefone(),
                      cliente.getCliEndereco(),
                      cliente.getCliBairro(),
                      cliente.getCliCidade(),
                      cliente.getCliUf(),
                      cliente.getCliCep()
                  });            
          }
      } catch (SQLException e) {
          JOptionPane.showMessageDialog(this, "Erro ao carregar clientes: " + e.getMessage());
        }
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscarPorId;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_cidade2;
    private javax.swing.JTable tb_cliente;
    private javax.swing.JTextField txt_filtro;
    private javax.swing.JLabel txt_info;
    // End of variables declaration//GEN-END:variables
}
